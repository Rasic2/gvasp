# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, Hui Zhou
# This file is distributed under the same license as the GVasp package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: GVasp 0.1.1\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-10-30 15:01+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../source/functions/calculation.rst:2
msgid "Calculation Utils"
msgstr "计算工具箱"

#: ../../source/functions/calculation.rst:4
msgid ""
"This section summary various calculation utils, including the surface "
"energy calculation (0) and electrostatic interaction energy calculation "
"(1), while the usage of the latter can see `here "
"<https://pubs.acs.org/doi/10.1021/acscatal.1c04856>`_. Different tasks "
"are specified by the command number."
msgstr "本部分对计算实用工具进行介绍，包括表面能计算（任务0）和静电相互作用能（任务1），其中后者在科研中的用法可参看 `这里 <https://pubs.acs.org/doi/10.1021/acscatal.1c04856>`_ 。不同的计算工具由各自的任务号指定。"

#: ../../source/functions/calculation.rst:7
msgid "surface energy calculation"
msgstr "表面能计算"

#: ../../source/functions/calculation.rst:9
msgid ""
"You can use :program:`GVasp` calculate the surface energy by the "
"following command:"
msgstr "你可以按照下面的命令计算表面能："

#: ../../source/functions/calculation.rst:15
msgid ""
"where the :code:`crystal_dir` and :code:`slab_dir` represent the job "
"directory for the crystal and slab models, respectively."
msgstr "其中 :code:`crystal_dir` 和 :code:`slab_dir` 分别代表晶胞和表面模型的计算目录。"

#: ../../source/functions/calculation.rst:18
msgid "electrostatic interaction energy calculation"
msgstr "静电相互作用能计算"

#: ../../source/functions/calculation.rst:20
msgid ""
"You can use :program:`GVasp` calculate the electrostatic interaction "
"energy by the following command:"
msgstr "你可以按照下面的命令计算静电相互作用能："

#: ../../source/functions/calculation.rst:26
msgid ""
"where the :code:`atoms` represents the atoms you want to calculate, and "
":code:`workdir` represents the work directory (default is \".\") store "
"the :file:`ACF.dat`."
msgstr "其中， :code:`atoms` 代表你想计算静电相互作用能的原子； :code:`workdir` 代表存放 :file:`ACF.dat` 的目录（默认是当前目录）。"

#: ../../source/functions/center.rst:2
msgid "Band Center Calculation"
msgstr "能带中心计算"

#: ../../source/functions/center.rst:4
msgid ""
"The d-band center descriptor is widely applied in heterogeneous "
"catalysis, and it can be calculated by the following equation:"
msgstr "d-带中心描述符广泛应用在多相催化研究领域，计算公式如下："

#: ../../source/functions/center.rst:6
msgid ""
"\\epsilon_d = \\frac{\\int_{-\\infty}^{\\infty} \\epsilon\\rho "
"_d(\\epsilon)d\\epsilon}{\\int_{-\\infty}^{\\infty} \\rho "
"_d(\\epsilon)d\\epsilon}"
msgstr ""

#: ../../source/functions/center.rst:10
msgid ""
"In :program:`GVasp`, you can easily calculated the band-center by the "
"following command:"
msgstr "使用 :program:`GVasp` ，你可以使用下述命令很容易的计算能带中心："

#: ../../source/functions/center.rst:16
msgid "The center.json is like this:"
msgstr "center.json 示例如下："

#: ../../source/functions/center.rst:28
msgid ""
"The arguments in the center.json is similar with that in :ref:`dos-plot "
"<dos_plot>` task."
msgstr "center.json 文件中各参数的含义与 :ref:`dos-plot <dos_plot>` 任务类似。"

#: ../../source/functions/charge.rst:2
msgid "Charge Related"
msgstr "电荷密度相关"

#: ../../source/functions/charge.rst:4
msgid ""
"This section solve the charge related tasks, such as chgsum, chgsplit and"
" transform the CHGCAR to \\*.grd file."
msgstr "本部分主要介绍电荷密度相关的任务如何开展，例如电荷密度求和、电荷密度拆分以及如何把 CHGCAR 文件转为 grd 后缀的文件。"

#: ../../source/functions/charge.rst:7
msgid "Charge Sum"
msgstr "电荷密度求和"

#: ../../source/functions/charge.rst:9
msgid ""
"Charge Sum meaning sum to CHARGE file to CHGCAR_sum, i.e. :code:`AECCAR0 "
"+ AECCAR2 = CHGCAR_sum`."
msgstr "电荷密度求和是指对一些电荷密度文件中的电荷密度求和，并保存在 CHGCAR_sum 文件中，例如 :code:`AECCAR0 + AECCAR2 = CHGCAR_sum` 。"

#: ../../source/functions/charge.rst:11 ../../source/functions/charge.rst:24
#: ../../source/functions/charge.rst:37
msgid "The command is:"
msgstr "使用下述命令进行："

#: ../../source/functions/charge.rst:20
msgid "Charge Split"
msgstr "电荷密度拆分"

#: ../../source/functions/charge.rst:22
msgid ""
"Charge Split meaning split CHGCAR file to CHGCAR_tot and CHGCAR_mag, i.e."
" :code:`CHGCAR -> CHGCAR_tot + CHGCAR_mag`."
msgstr "电荷密度拆分是指将 CHGCAR 文件拆分为 CHGCAR_tot 和 CHGCAR_mag 两个文件，即 :code:`CHGCAR -> CHGCAR_tot + CHGCAR_mag` 。"

#: ../../source/functions/charge.rst:33
msgid "Generate Grd File"
msgstr "生成 Grd 文件"

#: ../../source/functions/charge.rst:35
msgid ""
":file:`*.grd` can be load by `Material Studio <https://www.3ds.com"
"/products-services/biovia/products/molecular-modeling-simulation/biovia-"
"materials-studio/>`_, so :program:`GVasp` provide the transform from "
":file:`CHGCAR_mag` to it."
msgstr "储存电荷密度的 :file:`*.grd` 格式文件可以被 `Material Studio <https://www.3ds.com/products-services/biovia/products/molecular-modeling-simulation/biovia-materials-studio/>`_ 读取加载，因此 :program:`GVasp` 提供将 :file:`CHGCAR_mag` 转为对应 grd 文件的接口。"

#: ../../source/functions/charge.rst:43
msgid ""
"name parameter specify the output name of \\*.grd, default is "
":file:`vasp.grd`."
msgstr "name 参数指定输出的 grd 文件名，默认是 :file:`vasp.grd` 。"

#: ../../source/functions/charge.rst:45
msgid ""
"DenCut parameter specify the cutoff density (set it can decrease the size"
" of grd file), default is 250."
msgstr "DenCut 参数指定截断密度（设置该参数可减少 grd 文件的尺寸），默认是 250 。"

#: ../../source/functions/charge.rst:48
msgid ""
"More detailed information about loading grd file in Material Studio can "
"see `here "
"<https://codenote.readthedocs.io/en/latest/chemistry/MS.html#grd>`_."
msgstr "关于如何在 Material Studio 中可视化 grd 文件可以看 `这里 <https://codenote.readthedocs.io/en/latest/chemistry/MS.html#grd>`_ 。"

#: ../../source/functions/movie.rst:10 ../../source/functions/movie/freq.rst:6
#: ../../source/functions/movie/md.rst:6 ../../source/functions/movie/opt.rst:6
#: ../../source/functions/movie/ts.rst:6
#: ../../source/functions/movie/ts/con-ts.rst:6
#: ../../source/functions/movie/ts/dimer.rst:6
#: ../../source/functions/movie/ts/neb.rst:6 ../../source/functions/plot.rst:11
#: ../../source/functions/plot/band.rst:4 ../../source/functions/plot/dos.rst:6
#: ../../source/functions/plot/ep.rst:4 ../../source/functions/plot/neb.rst:4
#: ../../source/functions/plot/opt.rst:4 ../../source/functions/plot/pes.rst:4
#: ../../source/functions/sort.rst:6 ../../source/functions/submit.rst:31
#: ../../source/functions/submit/chg.rst:4
#: ../../source/functions/submit/dos.rst:4
#: ../../source/functions/submit/freq.rst:4
#: ../../source/functions/submit/md.rst:4
#: ../../source/functions/submit/opt.rst:8
#: ../../source/functions/submit/stm.rst:4
#: ../../source/functions/submit/ts.rst:6
#: ../../source/functions/submit/ts/con-ts.rst:6
#: ../../source/functions/submit/ts/dimer.rst:4
#: ../../source/functions/submit/ts/neb.rst:6
#: ../../source/functions/submit/wf.rst:4
msgid "Contents:"
msgstr "目录"

#: ../../source/functions/movie.rst:2
msgid "Visualize Trajectory"
msgstr "可视化轨迹"

#: ../../source/functions/movie.rst:4
msgid ""
"Visualize is a useful method to check calculation process, "
":program:`GVasp` provide visualize support for various VASP tasks, i.e., "
"optimization, moleculer dynamics, frequency, and TS search."
msgstr "可视化是可以用来检查计算的过程和结果， :program:`GVasp` 对各种 VASP 任务都提供了可视化支持，如，结构优化，分子动力学，频率计算，过渡态搜索等。"

#: ../../source/functions/movie.rst:6
msgid ""
"The idea is to transform the :file:`XDATCAR` (for :ref:`optimization "
"<opt_movie>`, :ref:`moleculer dynamics <md_movie>`, :ref:`frequency "
"<freq_movie>`, :ref:`con-TS <con-TS_movie>`, and :ref:`dimer "
"<dimer_movie>` tasks) or [:file:`POSCAR` | :file:`CONTCAR`] (for "
":ref:`neb <neb_movie>` task) to the :file:`*.arc` file (`Material Studio "
"<https://www.3ds.com/products-services/biovia/products/molecular-"
"modeling-simulation/biovia-materials-studio/>`_ accepted)."
msgstr "具体实现是将 :file:`XDATCAR` (对于 :ref:`结构优化 <opt_movie>`, :ref:`分子动力学 <md_movie>`, :ref:`频率计算 <freq_movie>`, :ref:`限制性过渡态搜索 <con-TS_movie>` 和 :ref:`dimer 过渡态搜索 <dimer_movie>` 任务) 或者 [:file:`POSCAR` | :file:`CONTCAR`] (对于 :ref:`neb 过渡态搜索 <neb_movie>` 任务) 转为 :file:`*.arc` 文件 (`Material Studio <https://www.3ds.com/products-services/biovia/products/molecular-modeling-simulation/biovia-materials-studio/>`_ 可识别读取)。"

#: ../../source/functions/movie.rst:8
msgid ""
"Except :ref:`frequency <freq_movie>`, other tasks accept optional "
"[-n/-\\-name] to specify the name of output :file:`*.arc`, other "
"arguments will describe in corresponding sub-topic."
msgstr "除了 :ref:`频率计算 <freq_movie>`, 其他的任务都接受一个可选的参数 [-n/-\\-name] 来指定输出 :file:`*.arc` 的文件名, 其他的参数将在下面的子章节分别介绍。"

#: ../../source/functions/movie.rst:20
msgid ""
"More detailed information about the arc file display can see `here "
"<https://codenote.readthedocs.io/en/latest/chemistry/MS.html#arc>`_."
msgstr "更多关于如何展示 arc 文件相关的信息可以看 `这里 <https://codenote.readthedocs.io/en/latest/chemistry/MS.html#arc>`_ 。"

#: ../../source/functions/movie/freq.rst:4
msgid "Frequency Vibration"
msgstr "频率振动可视化"

#: ../../source/functions/movie/freq.rst:10
msgid ""
"One can use :program:`GVasp` to visualize the frequency vibration, only "
"need run the command below:"
msgstr "使用 :program:`GVasp` 可视化频率的振动方向，只需要运行下述命令："

#: ../../source/functions/movie/freq.rst:16
msgid "and the :file:`freq*.arc` will output in the workdir."
msgstr "之后 :file:`freq*.arc` 将会输出在当前目录。"

#: ../../source/functions/movie/freq.rst:19
msgid ""
"The default behavior of :program:`GVasp` will search the *image "
"frequency* and visualize its or their vibration."
msgstr ":program:`GVasp` 默认会搜索 *虚频* 并可视化它的振动方向。"

#: ../../source/functions/movie/freq.rst:22
msgid "specify freq"
msgstr "指定频率"

#: ../../source/functions/movie/freq.rst:24
msgid ""
"Certainly, you can also specify the *frequency* by add the argument "
"-f/-\\-freq, and it accept :code:`'image'` (str) or :code:`int-type` "
"(start from 0) value as the input."
msgstr "当然，你也可以通过 -f/-\\-freq 参数来指定想分析的频率，它接受 :code:`'image'` （字符串格式） 或者 :code:`int-type` （序号从0开始）作为参数值。"

#: ../../source/functions/movie/freq.rst:27
msgid "If you set a int value, noticed that the freq exist in your system."
msgstr "如果你蚕蛹整数格式输入，请确保你的体系中确实存在该频率。"

#: ../../source/functions/movie/md.rst:4
msgid "Ab-initio Molecule Dynamics Visualize"
msgstr "AIMD 可视化"

#: ../../source/functions/movie/md.rst:10
msgid ""
"One can use :program:`GVasp` to visualize the molecule dynamics (MD) "
"trajectory, only need run the command below:"
msgstr "使用 :program:`GVasp` 可视化分子动力学的轨迹，只需要运行下述命令："

#: ../../source/functions/movie/md.rst:16
#: ../../source/functions/movie/opt.rst:16
#: ../../source/functions/movie/ts/con-ts.rst:16
#: ../../source/functions/movie/ts/dimer.rst:16
#: ../../source/functions/movie/ts/neb.rst:16
msgid "and the :file:`movie.arc` will output in the workdir."
msgstr "之后 :file:`movie.arc` 将会输出在当前目录。"

#: ../../source/functions/movie/md.rst:19
#: ../../source/functions/movie/opt.rst:21
#: ../../source/functions/movie/ts/con-ts.rst:20
#: ../../source/functions/movie/ts/dimer.rst:20
#: ../../source/functions/movie/ts/neb.rst:25
msgid "specify name"
msgstr "指定输出文件名"

#: ../../source/functions/movie/md.rst:21
#: ../../source/functions/movie/ts/con-ts.rst:22
#: ../../source/functions/movie/ts/dimer.rst:22
#: ../../source/functions/movie/ts/neb.rst:27
msgid ""
"Certainly, if you don't like the prefix (`\"movie\"`), you can also "
"specify another name to substitute it, likewise the :ref:`optimization "
"<name_movie>` task."
msgstr "当然，如果你不喜欢前缀（`\"movie\"`），你可以通过指定另外的名字来替代它，详情参考 :ref:`结构优化 <name_movie>` 任务。"

#: ../../source/functions/movie/opt.rst:4
msgid "Optimization Visualize"
msgstr "结构优化"

#: ../../source/functions/movie/opt.rst:10
msgid ""
"One can use :program:`GVasp` to visualize the optimization trajectory, "
"only need run the command below:"
msgstr "使用 :program:`GVasp` 可视化结构优化的轨迹，只需要运行下述命令："

#: ../../source/functions/movie/opt.rst:23
msgid ""
"Certainly, if you don't like the prefix (`\"movie\"`), you can also "
"specify another name to substitute it, for example,"
msgstr "当然，如果你不喜欢前缀（`\"movie\"`），你可以通过指定另外的名字来替代它，例如，"

#: ../../source/functions/movie/opt.rst:29
msgid "then the opt.arc will output."
msgstr "之后，:file:`opt.arc` 将会输出在当前目录。"

#: ../../source/functions/movie/ts.rst:2
msgid "Transition State Search Visualize"
msgstr "过渡态搜索可视化"

#: ../../source/functions/movie/ts.rst:4
msgid ""
":program:`GVasp` support visualize optimization trajectory of below three"
" TS-search method."
msgstr ":program:`GVasp` 支持下列三种过渡态搜索方法的轨迹可视化。"

#: ../../source/functions/movie/ts/con-ts.rst:4
#: ../../source/functions/submit/ts/con-ts.rst:4
msgid "Constrained-TS Method"
msgstr "限制性过渡态搜索"

#: ../../source/functions/movie/ts/con-ts.rst:10
msgid ""
"One can use :program:`GVasp` to visualize the optimization trajectory in "
"TS-search process (currently is **con-TS**), only need run the command "
"below:"
msgstr "使用 :program:`GVasp` 可视化过渡态搜索（**con-TS** 方法）的轨迹，只需要运行下述命令："

#: ../../source/functions/movie/ts/dimer.rst:4
#: ../../source/functions/submit/ts/dimer.rst:2
msgid "Dimer Method"
msgstr "Dimer 过渡态搜索"

#: ../../source/functions/movie/ts/dimer.rst:10
msgid ""
"One can use :program:`GVasp` to visualize the optimization trajectory in "
"TS-search process (currently is **dimer**), only need run the command "
"below:"
msgstr "使用 :program:`GVasp` 可视化过渡态搜索（**dimer** 方法）的轨迹，只需要运行下述命令："

#: ../../source/functions/movie/ts/neb.rst:4
msgid "NEB Method"
msgstr "NEB 过渡态搜索"

#: ../../source/functions/movie/ts/neb.rst:10
msgid ""
"For NEB method, we actually support to visualize the reaction path by "
"concentrate its images' :file:`POSCARs` or :file:`CONTCARs`, and likewise"
" the other task, one can do this by:"
msgstr "对于 NEB 方法，我们支持将 images （:file:`POSCARs` 或者 :file:`CONTCARs`）拼接成轨迹进行可视化，命令如下："

#: ../../source/functions/movie/ts/neb.rst:20
msgid "specify position"
msgstr "指定文件类型"

#: ../../source/functions/movie/ts/neb.rst:22
msgid ""
"Through the -p/-\\-pos argument, You can choose which type of files to "
"construct the *reaction path*, i.e., :file:`POSCAR` or :file:`CONTCAR`, "
"default type is :file:`POSCAR`."
msgstr "通过 -p/-\\-pos 参数，你可以选择是通过 :file:`POSCAR` 还是 :file:`CONTCAR` 构建 *反应坐标* ，默认类型是 :file:`POSCAR`。"

#: ../../source/functions/output.rst:2
msgid "Output Visualize"
msgstr "优化后的结构可视化"

#: ../../source/functions/output.rst:4
msgid ""
":program:`GVasp` can visualize the VASP :file:`CONTCAR` by generating the"
" :file:`*.xsd` file, just need to run the following command:"
msgstr ":program:`GVasp` 支持将 VASP :file:`CONTCAR` 转化为 :file:`*.xsd` 文件进行可视化，执行下述命令："

#: ../../source/functions/output.rst:11
msgid "The name of the \\*.xsd file depend on your job name in submit.script."
msgstr "\\*.xsd 的文件名依赖于 submit.script 指定的作业名。"

#: ../../source/functions/plot.rst:2
msgid "Plot Interface"
msgstr "绘图接口"

#: ../../source/functions/plot.rst:4
msgid ""
":program:`GVasp` support optimization, electrostatic potential, band "
"structure, density of states, potential energy surface as well as the neb"
" images plot. Each plot task can use :code:`--save` or :code:`--show` to "
"save or show the output figure. For the plot setting and data load, one "
"need to use :code:`-j/--json` to specify one json file to handle it."
msgstr ":program:`GVasp` 提供结构优化、势能面、能带结构、态密度以及 NEB images 能量的绘图接口，每一种绘图任务都可以使用 :code:`--save` 或者 :code:`--show` 来保存或展示生成的图片。对于绘图设置和数据加载，用户只需使用 :code:`-j/--json` 指定一个 json 文件即可。"

#: ../../source/functions/plot.rst:7
msgid "**-\\-save** and **-\\-show** can't as the arguments at the meantime."
msgstr "**-\\-save** 和 **-\\-show** 不能同时指定。"

#: ../../source/functions/plot.rst:9
msgid "Detailed arguments setting can see the **sub-topics** below."
msgstr "更详细的参数设置可以参照下述 **子章节** 。"

#: ../../source/functions/plot.rst:23
msgid ""
"We recommend user plot the figure under the **Win/MAC OS** system, "
"because **Linux** may lack some necessary fonts."
msgstr "我们推荐用户在 **Win/MAC OS** 操作系统下绘图，因为 **Linux** 可能会缺少一些必要的字体。"

#: ../../source/functions/plot/band.rst:2
msgid "Band Structure Plot"
msgstr "能带结构绘制"

#: ../../source/functions/plot/band.rst:8
msgid ""
"For the band structure, one can use :program:`GVasp` to plot it, just run"
" the command:"
msgstr "使用 :program:`GVasp` 绘制能带结构，只需执行下述命令："

#: ../../source/functions/plot/band.rst:14
#: ../../source/functions/plot/ep.rst:14
msgid "then, one may obtain the :file:`figure.svg` which plot the band structure."
msgstr "之后，就可以得到绘制能带结构的 :file:`figure.svg` 了。"

#: ../../source/functions/plot/band.rst:16
#: ../../source/functions/plot/ep.rst:16 ../../source/functions/plot/opt.rst:18
msgid "Just like this,"
msgstr "类似这样，"

#: ../../source/functions/plot/band.rst:22
#: ../../source/functions/plot/ep.rst:22 ../../source/functions/plot/neb.rst:20
msgid "For this task, the :file:`plot.json` is like this"
msgstr "对于这一任务， :file:`plot.json` 格式如下："

#: ../../source/functions/plot/band.rst:35
#: ../../source/functions/plot/ep.rst:32 ../../source/functions/plot/neb.rst:30
msgid ""
"The attention of :code:`--show`, :code:`--save` and :code:`--json` can be"
" seen in :ref:`optimization <show_plot>` part."
msgstr "关于 :code:`--show`, :code:`--save` 和 :code:`--json` 参数的注意事项可以参照 :ref:`结构优化 <show_plot>` 章节。"

#: ../../source/functions/plot/dos.rst:4
msgid "Density of States Plot"
msgstr "态密度绘制"

#: ../../source/functions/plot/dos.rst:10
msgid ""
"Density of States (DOS) is vary important to understand the electronic "
"structure of the solid, and our :program:`GVasp` also support its plot."
msgstr "态密度（DOS）对于理解固体材料的电子结构十分重要，使用 :program:`GVasp` 可以很容易的进行绘制。"

#: ../../source/functions/plot/dos.rst:13
#: ../../source/functions/plot/pes.rst:11
msgid "simple case"
msgstr "简单的例子"

#: ../../source/functions/plot/dos.rst:15
msgid ""
"Firstly, we start from the Total DOS plot, the files user need to prepare"
" is :file:`DOSCAR` and :file:`CONTCAR`, then run command below:"
msgstr "首先，我们从 Total DOS 的绘制说起，用户需要提供 :file:`DOSCAR` 和 :file:`CONTCAR` 文件，然后运行下述命令："

#: ../../source/functions/plot/dos.rst:21
#: ../../source/functions/plot/dos.rst:71
#: ../../source/functions/plot/dos.rst:151
#: ../../source/functions/plot/dos.rst:175
msgid "The figure is like this:"
msgstr "绘制的态密度图类似这样："

#: ../../source/functions/plot/dos.rst:26
#: ../../source/functions/plot/pes.rst:30
#: ../../source/functions/plot/pes.rst:75
#: ../../source/functions/plot/pes.rst:102
msgid "The plot.json is like this:"
msgstr "plot.json 如下所示："

#: ../../source/functions/plot/dos.rst:40
msgid ""
"It can ben seen that, many parameters have been added in plot.json, but "
"actually the :code:`dos_file`, :code:`pos_file` and :code:`data` is "
"required."
msgstr "可以看到， plot.json 中添加了很多参数，但是只有 :code:`dos_file`, :code:`pos_file` 和 :code:`data` 是必须的。"

#: ../../source/functions/plot/dos.rst:42
msgid "**dos_file**: represents the location of :file:`DOSCAR`, should be a list"
msgstr "**dos_file**: 代表 :file:`DOSCAR` 的位置（必须是列表）"

#: ../../source/functions/plot/dos.rst:44
msgid "**pos_file**: represents the location of :file:`CONTCAR`, should be a list"
msgstr "**pos_file**: 代表 :file:`CONTCAR` 的位置（必须是列表）"

#: ../../source/functions/plot/dos.rst:46
msgid ""
"**data**: a dict, key is index of plot DOSCAR/CONTCAR in "
":code:`dos_file`; value is a list, each element represents a line in the "
"figure"
msgstr "**data**: 字典格式，key 是 要绘制的 DOSCAR 在 :code:`dos_file` 中的索引序号，值是一个列表，每一个元素代表态密度图中将要绘制的一条线"

#: ../../source/functions/plot/dos.rst:49
msgid "`dos_file` and `pos_file` should have same length"
msgstr "`dos_file` 和 `pos_file` 必须长度一样"

#: ../../source/functions/plot/dos.rst:51
msgid ""
"Therefore, for the simple case, we only added the :code:`color` to "
"control the line's color. Very simple, is it?"
msgstr "因此，对于这一简单的列子，我们仅增加了一个 :code:`color` 参数来控制线的颜色。"

#: ../../source/functions/plot/dos.rst:55
msgid "atoms projection"
msgstr "原子投影态密度"

#: ../../source/functions/plot/dos.rst:57
msgid ""
"If we want to plot the projection DOS to some atoms, the plot.json is "
"like this:"
msgstr "我们想绘制原子投影的态密度， plot.json 示例如下："

#: ../../source/functions/plot/dos.rst:76
msgid ""
"Actually, because the atoms list is continuous, **syntactic sugar** can "
"be applied, like this"
msgstr "事实上，如果我们要绘制的原子列表是连续的，可以使用 **原子语法糖** 来指定，类似这样："

#: ../../source/functions/plot/dos.rst:90
msgid ""
"Particularly, if you want to plot all atoms belonging to one element, you"
" can also applied the **syntactic sugar** like this"
msgstr "特别是，如果我们想绘制某一元素的所有原子，也可以使用类似这样的 **原子语法糖** 来指定："

#: ../../source/functions/plot/dos.rst:104
msgid "Multi-Elements is now also supported, like this:"
msgstr "同时指定多种元素现在也是支持的，类似这样："

#: ../../source/functions/plot/dos.rst:118
msgid ""
"If you want to decomposing to orbitals, add the :code:`orbitals` "
"parameter, like this:"
msgstr "如果你还想将态密度分解到原子轨带上，那么需要额外增加一个 :code:`orbitals` 参数，类似这样："

#: ../../source/functions/plot/dos.rst:134
#: ../../source/functions/plot/pes.rst:87
msgid "multiple lines"
msgstr "同一文件多态密度图绘制"

#: ../../source/functions/plot/dos.rst:136
msgid "One figure, one DOSCAR, multiple lines, modify the plot.json like this:"
msgstr "如果想在一张图上针对一个 DOSCAR 体系绘制多条态密度线，修改 plot.json 如下："

#: ../../source/functions/plot/dos.rst:157
msgid "use fill method"
msgstr "使用填充方法"

#: ../../source/functions/plot/dos.rst:159
msgid ""
"You can also plot the dos in fill format, and the alpha argument is also "
"accepted."
msgstr "你也可以使用填充格式来绘制态密度，alpha参数对于该种绘制风格同样是支持的。"

#: ../../source/functions/plot/dos.rst:181
msgid "multiple files"
msgstr "多文件态密度图绘制"

#: ../../source/functions/plot/dos.rst:183
msgid ""
"Not enough, if you want to compare different structures, you can modify "
"the plot.json like this"
msgstr "如果你想在一张图上比较不同结构的态密度图，可以修改 plot.json 如下："

#: ../../source/functions/plot/dos.rst:198
msgid ""
"It's still very simple, what you need to do is modify the plot.json, run "
"the command again, then you got it ~~"
msgstr "仍然是非常简单的，核心步骤就是根据需要修改 plot.json ，然后重新运行命令，之后就大功告成了~~"

#: ../../source/functions/plot/dos.rst:201
msgid ""
"The default DOSCAR format is regulated by setting the LORBIT=12 in INCAR,"
" so if your LORBIT in INCAR is not 11 or 12, please add `\"LORBIT\": 10` "
"in the plot.json."
msgstr "默认生成的 DOSCAR 格式是按照 INCAR 中设置 LORBIT=12 来生成的，因此如果你 INCAR 中 LORBIT 的设置不是 11 或 12，请在 plot.json 中添加 `\"LORBIT\": 10` 来说明。"

#: ../../source/functions/plot/ep.rst:2
msgid "Electrostatic Potential Plot"
msgstr "静电势绘制"

#: ../../source/functions/plot/ep.rst:8
msgid ""
"For the electrostatic potential (ep), one can use :program:`GVasp` to "
"plot it, just run the command:"
msgstr "对于静电势（ep），使用 :program:`GVasp` 可以很容易的进行绘制。"

#: ../../source/functions/plot/neb.rst:2
msgid "NEB images Plot"
msgstr "NEB images 能量绘制"

#: ../../source/functions/plot/neb.rst:8
msgid ""
"For the transition state using the NEB method, one can use "
":program:`GVasp` to plot the energy difference of all images, just run "
"the command:"
msgstr "对于使用 NEB 方法搜索得到的势能面，使用 :program:`GVasp` 可以很容易的对所有的 images 能量进行绘制，只需要运行下述命令："

#: ../../source/functions/plot/neb.rst:14
msgid "then, one may obtain the :file:`figure.svg` like this"
msgstr "之后，就可以获得一个类似的 :file:`figure.svg` "

#: ../../source/functions/plot/opt.rst:2
msgid "Optimization trajectory Plot"
msgstr "优化轨迹绘制"

#: ../../source/functions/plot/opt.rst:8
msgid ""
"For the optimization, one may not only care about the structural "
"evolution (which can be visualized :ref:`here <opt_movie>`), but also the"
" **energy/force** change with the **optimization steps**, which can also "
"be analyzed by :program:`GVasp`."
msgstr "对于结构优化，可能不仅会关心结构的演变过程（可视化方法 :ref:`在这 <opt_movie>`），也会关心 **energy/force** 随着 **optimization steps** 增长的改变, 使用 :program:`GVasp` 可以很容易的进行类似的绘制分析。"

#: ../../source/functions/plot/opt.rst:10
msgid "A simple code need to be typed for this work:"
msgstr "只需要运行下面的代码即可完成："

#: ../../source/functions/plot/opt.rst:16
msgid ""
"then, one may obtain the :file:`figure.svg` which plot the energy and "
"force change with the steps increment."
msgstr "之后，便可以获得绘有能量和力随优化过程改变的 :file:`figure.svg` 文件。"

#: ../../source/functions/plot/opt.rst:24
msgid ""
"The only parameter in plot.json is :code:`height`, certainly it is "
"optional."
msgstr "plot.json 中唯一的参数 :code:`height`，也是可选的。"

#: ../../source/functions/plot/opt.rst:35
msgid "The **json file** is required, even if is empty, :command:`touch` it."
msgstr "**json file** 文件是必须的，即使内容为空。"

#: ../../source/functions/plot/opt.rst:38
msgid ""
"**-\\-show** or **-\\-save** should specify one, and only need to one, "
"otherwise nothing happen."
msgstr "**-\\-show** 或 **-\\-save** 仅可指定一个，否则什么都不会发生。"

#: ../../source/functions/plot/pes.rst:2
msgid "Potential Energy Surface Plot"
msgstr "势能面绘制"

#: ../../source/functions/plot/pes.rst:8
msgid ""
"Potential Energy Surface (PES) plot is important in reaction mechanism "
"research, and our :program:`GVasp` certainly support to plot PES with "
"*various* data."
msgstr "势能面（PES）绘制对于反应机理的研究是十分重要的，使用 :program:`GVasp` 可以很容易的进行绘制，仅需提供所需的数据即可。"

#: ../../source/functions/plot/pes.rst:13
msgid ""
"A very simple reaction data like this (noted they are all relative "
"energy):"
msgstr "一个非常简单的反应数据类似这样（相对能量）："

#: ../../source/functions/plot/pes.rst:19
msgid "We can plot it by run the command like before:"
msgstr "我们可以运行下面的命令来进行绘制："

#: ../../source/functions/plot/pes.rst:25
msgid "And the figure like this:"
msgstr "势能面类似这样："

#: ../../source/functions/plot/pes.rst:39
msgid ""
"**data** parament is a set of lines, so even if you have only one line, "
"its type should be List[List[float]]."
msgstr "**data** 参数是一系列线的集合，因此即使你只绘制一条线，它的类型也应该是 List[List[float]]。"

#: ../../source/functions/plot/pes.rst:42
msgid "change style"
msgstr "改变风格"

#: ../../source/functions/plot/pes.rst:44
msgid ""
"By add a :code:`style=\"solid_curve\"`, the figure can be changed like "
"this:"
msgstr "通过增加 :code:`style=\"solid_curve\"`，势能面图可以更改为如下所示："

#: ../../source/functions/plot/pes.rst:57
msgid ""
"For the \"solid_curve\" style, one need to specify the data belonging to "
"a intermediate state (MS) of transition state (TS), so **data** parament'"
" type now be List[List[List[float], List[str]]]."
msgstr "对于 \"solid_curve\" 风格, 需要指定数据点归属为中间态（MS）还是过渡态（TS），所以 **data** 参数的类型变为 List[List[List[float], List[str]]]。"

#: ../../source/functions/plot/pes.rst:60
msgid "None value"
msgstr "空值"

#: ../../source/functions/plot/pes.rst:62
msgid "If your data have :code:`None`, the :program:`GVasp` can work well."
msgstr "如果你的数据中含有 :code:`None`，:program:`GVasp` 也可以正常工作。"

#: ../../source/functions/plot/pes.rst:64
msgid "for example,"
msgstr "例如，"

#: ../../source/functions/plot/pes.rst:70
#: ../../source/functions/plot/pes.rst:97
msgid "The plot figure is like this:"
msgstr "绘制出的图类似这样："

#: ../../source/functions/plot/pes.rst:84
msgid ""
"**Json** file can't recognize the None value, so we substitute the *None*"
" as *null*."
msgstr "**Json** 文件不识别 None，需要替换 *None* 为 *null* 。"

#: ../../source/functions/plot/pes.rst:89
msgid "If you want to compete different reaction pathway, data like below:"
msgstr "如果你想比较不同的反应路径，数据类似这样："

#: ../../source/functions/plot/pes.rst:113
msgid "And we close the `text` by add :code:`text_flag = false`."
msgstr "我们可以通过增加 :code:`text_flag = false` 来关掉能量标签。"

#: ../../source/functions/plot/pes.rst:115
msgid ""
"Here, you may known how to plot the PES with :program:`GVasp`, of course,"
" it can do better in the future."
msgstr "现在，你应该知道如何通过 :program:`GVasp` 来绘制 PES 了，当然我们还会持续改进。"

#: ../../source/functions/sort.rst:4
msgid "Align Structures"
msgstr "结构对齐"

#: ../../source/functions/sort.rst:10
msgid ""
"If you use the :program:`GVasp` to generate the :ref:`NEB <neb_topic>` "
"inputs, the first thing is align the structure, because the atoms in "
"initial and final structures may not one-to-one."
msgstr "如果你使用 :program:`GVasp` 来生成 :ref:`NEB <neb_topic>` 所需的输入，首先要做的是结构对齐，因为原子的位置在初态和末态可能不是一一对应的。"

#: ../../source/functions/sort.rst:12
msgid "The command is simple, like this:"
msgstr "命令十分简单，如下所示："

#: ../../source/functions/sort.rst:19
msgid ""
"The INI_POSCAR and FNI_POSCAR are names provided by user of the initial "
"and final structures."
msgstr "INI_POSCAR 和 FNI_POSCAR 是用户提供的初态和末态结构文件。"

#: ../../source/functions/sort.rst:21
msgid ""
"Then :program:`GVasp` will generate two POSCAR files which suffix is "
":file:`_sort`."
msgstr "然后， :program:`GVasp` 会自动生成带有后缀 :file:`_sort` 的两个 POSCAR 文件。"

#: ../../source/functions/sort.rst:24
msgid ""
"To check if the align success, you can visualize the NEB (set the "
":code:`-p/-\\-pos=POSCAR`), detailed information can see :ref:`here "
"<neb_movie>`."
msgstr "为了检查对其是否成功，你可以可视化 NEB images 的结构进行查看（设置 :code:`-p/-\\-pos=POSCAR`），更多细节可以看 :ref:`这里 <neb_movie>`。"

#: ../../source/functions/submit.rst:6
msgid "Generate Vasp Inputs"
msgstr "产生 VASP 输入文件"

#: ../../source/functions/submit.rst:8
msgid ""
":program:`GVasp` can help user quick generate VASP inputs (|inputs|), "
"just need only run :file:`gvasp submit TASK [arguments]`."
msgstr ":program:`GVasp` 可以帮助用户快速生成 VASP 的输入文件（|inputs|），只需要运行 :file:`gvasp submit TASK [arguments]` 即可。"

#: ../../source/functions/submit.rst:10
msgid ""
"The following arguments can be applied in all of the tasks, while other "
"arguments will describe in corresponding sub-topic."
msgstr "下面的参数可以应用在所有生成的任务中，其他的参数将在各自的章节单独讲述。"

#: ../../source/functions/submit.rst:16
msgid "Argument"
msgstr "参数"

#: ../../source/functions/submit.rst:17
msgid "Description"
msgstr "描述"

#: ../../source/functions/submit.rst:18
msgid "-P/-\\-potential"
msgstr ""

#: ../../source/functions/submit.rst:19
msgid "specify the potential"
msgstr "指定赝势"

#: ../../source/functions/submit.rst:20
msgid "-V/-\\-vdw"
msgstr ""

#: ../../source/functions/submit.rst:21
#: ../../source/functions/submit/opt.rst:67
msgid "open the vdw-correction"
msgstr "开启 VDM-修正"

#: ../../source/functions/submit.rst:22
msgid "-S/-\\-sol"
msgstr ""

#: ../../source/functions/submit.rst:23
#: ../../source/functions/submit/opt.rst:81
msgid "including the solvation effect"
msgstr "包含溶剂效应"

#: ../../source/functions/submit.rst:24
msgid "-G/-\\-gamma"
msgstr ""

#: ../../source/functions/submit.rst:25
#: ../../source/functions/submit/opt.rst:95
msgid "perform the Gamma-point calculation"
msgstr "执行 Gamma-点计算"

#: ../../source/functions/submit.rst:26
msgid "-N/-\\-nelect"
msgstr ""

#: ../../source/functions/submit.rst:27
#: ../../source/functions/submit/opt.rst:106
msgid "perform charged system calculation"
msgstr "执行带电体系计算"

#: ../../source/functions/submit.rst:29
msgid ""
"Detailed information about the mentioned arguments can see in :ref:`opt "
"<optimization>` task."
msgstr "上述参数的详细信息可以在 :ref:`opt <optimization>` 任务中查看。"

#: ../../source/functions/submit/chg.rst:2
msgid "Charge Density"
msgstr "电荷密度任务"

#: ../../source/functions/submit/chg.rst:8
msgid ""
"Charge Density calculation is another important task, you can also use "
":program:`GVasp` to handle its inputs."
msgstr "电荷密度计算是另一项十分重要的任务类型，使用 :program:`GVasp` 可以很容易的生成适配的输入文件。"

#: ../../source/functions/submit/chg.rst:10
msgid ""
"Likewise the :ref:`optimization <optimization>` task, run the command "
"(need a *.xsd file):"
msgstr "类似 :ref:`结构优化 <optimization>` 任务，运行命令（需要一个 *.xsd 文件）："

#: ../../source/functions/submit/chg.rst:17
#: ../../source/functions/submit/dos.rst:20
#: ../../source/functions/submit/wf.rst:17
msgid "From finished job"
msgstr "从已完成任务生成输入"

#: ../../source/functions/submit/chg.rst:19
msgid ""
"Meantime, you can also start a chg task from a finished job which has the"
" CONTCAR file, and the :program:`GVasp` will auto generate the inputs for"
" this task, just run the following command:"
msgstr "同时，你也可以从一个已经完成的任务（含有 CONTCAR 文件）出发开展一个 chg 任务，只需要运行下述命令："

#: ../../source/functions/submit/chg.rst:26
msgid "This feature is also support for the wf and dos tasks."
msgstr "这一特征也适用于 wf 和 dos 任务。"

#: ../../source/functions/submit/chg.rst:31
msgid "open analysis option"
msgstr "开启电荷密度分析选项"

#: ../../source/functions/submit/chg.rst:33
msgid ""
"If you want to apply the `bader "
"<http://theory.cm.utexas.edu/henkelman/code/bader/>`_ calculation, "
":ref:`chgsplit <split>` and :ref:`transform CHGCAR_mag to grd <grd>` "
"after the charge calculation, you can run the following command:"
msgstr "如果你想在计算完成后执行 `bader <http://theory.cm.utexas.edu/henkelman/code/bader/>`_ 计算， :ref:`电荷密度拆分 <split>` 和 :ref:`转换 CHGCAR_mag 到 grd 文件 <grd>` ，你可以使用下述命令生成输入："

#: ../../source/functions/submit/chg.rst:39
msgid "and the mentioned task will be performed in one task."
msgstr "之后上述一连串的任务将在一个作业中完成。"

#: ../../source/functions/submit/chg.rst:42
msgid "Make sure you add bader in your PATH environment."
msgstr "确保你的 bader 在 PATH 环境变量里。"

#: ../../source/functions/submit/chg.rst:45
#: ../../source/functions/submit/dos.rst:32
#: ../../source/functions/submit/wf.rst:29
msgid "apply sequential task"
msgstr "开展连续任务"

#: ../../source/functions/submit/chg.rst:47
msgid ""
"If you finally want to perform the charge optimization, we recommend you "
"use the following command:"
msgstr "如果你最终想开展一个电荷密度的计算，我们推荐你使用下述命令生成输入文件："

#: ../../source/functions/submit/chg.rst:53
msgid ""
"and the task will perform the optimization and charge calculation in a "
"sequential task."
msgstr "之后，该作业会先从结构优化任务开始，结束后再进行电荷密度计算。"

#: ../../source/functions/submit/chg.rst:56
#: ../../source/functions/submit/dos.rst:43
msgid ""
"Sequential task also support the :ref:`low <low>` and :ref:`analysis "
"<analysis>` options."
msgstr "连续任务也支持 :ref:`low <low>` 和 :ref:`analysis <analysis>` 选项。"

#: ../../source/functions/submit/chg.rst:59
#: ../../source/functions/submit/dos.rst:46
#: ../../source/functions/submit/freq.rst:17
#: ../../source/functions/submit/md.rst:15
#: ../../source/functions/submit/stm.rst:15
#: ../../source/functions/submit/ts/con-ts.rst:19
#: ../../source/functions/submit/ts/dimer.rst:20
#: ../../source/functions/submit/ts/neb.rst:50
#: ../../source/functions/submit/wf.rst:43
msgid "Other arguments"
msgstr "其他的参数"

#: ../../source/functions/submit/chg.rst:62
#: ../../source/functions/submit/dos.rst:49
#: ../../source/functions/submit/freq.rst:20
#: ../../source/functions/submit/md.rst:18
#: ../../source/functions/submit/stm.rst:18
#: ../../source/functions/submit/ts/con-ts.rst:22
#: ../../source/functions/submit/ts/dimer.rst:23
#: ../../source/functions/submit/ts/neb.rst:53
#: ../../source/functions/submit/wf.rst:46
msgid ""
"More information of other arguments can be seen in :ref:`optimization "
"<arguments>` task."
msgstr "更多关于其他参数的信息可以参见 :ref:`结构优化 <arguments>` 任务。"

#: ../../source/functions/submit/dos.rst:2
msgid "Density of States"
msgstr "态密度"

#: ../../source/functions/submit/dos.rst:8
msgid ""
"Density of States (DOS) calculation is another important task, you can "
"also use :program:`GVasp` to handle its inputs."
msgstr "态密度（DOS）计算也是另一项十分重要的任务类型，使用 :program:`GVasp` 也可以很容易的生成对应的输入文件。"

#: ../../source/functions/submit/dos.rst:10
#: ../../source/functions/submit/wf.rst:10
msgid "Likewise the :ref:`optimization <optimization>` task, run the command:"
msgstr "类似 :ref:`结构优化 <optimization>` 任务，运行下述命令："

#: ../../source/functions/submit/dos.rst:17
msgid ""
"This command only generate the **INCAR**, **KPOINTS**, **POSCAR** and "
"**POTCAR** files, thus you should prepare other files (e.g. CHGCAR) by "
"yourself."
msgstr "该命令仅会生成 **INCAR**, **KPOINTS**, **POSCAR** 和 **POTCAR** 文件，因此你需要自行准备其他文件（例如，CHGCAR）。"

#: ../../source/functions/submit/dos.rst:22
msgid ""
"Meantime, you can also start a dos task from a finished job which has the"
" CONTCAR and CHGCAR files, and the :program:`GVasp` will auto generate "
"the inputs for this task, just run the following command:"
msgstr "同时，你也可以从一个已完成的任务（含有 CONTCAR 和 CHGCAR 文件）出发生成 dos 任务所需的输入，只需要运行下述命令："

#: ../../source/functions/submit/dos.rst:29
msgid "This feature is also support for the chg and wf tasks."
msgstr "这一功能也适应于 chg 和 wf 任务。"

#: ../../source/functions/submit/dos.rst:34
msgid ""
"If you finally want to perform the DOS calculation, we recommend you use "
"the following command:"
msgstr "如果你最终想开展一个态密度的计算任务，我们推荐你使用下述命令生成输入文件："

#: ../../source/functions/submit/dos.rst:40
msgid ""
"and the task will perform the optimization, charge calculation and DOS "
"calculation in a sequential task."
msgstr "之后，该作业会先从结构优化任务开始，结束后后进行电荷密度计算，最后在执行态密度的计算。"

#: ../../source/functions/submit/freq.rst:2
msgid "Frequency"
msgstr "频率计算"

#: ../../source/functions/submit/freq.rst:8
msgid ""
"Frequency calculation is often used to check imaginary frequency, IR "
"spectrum modelling, free energy correction and so on."
msgstr "频率计算广泛用于虚频验证，光谱模拟，自由能校正等多种计算任务中。"

#: ../../source/functions/submit/freq.rst:10
msgid ""
"Likewise the :ref:`optimization <optimization>` task, you can also use "
":program:`GVasp` to handle its inputs, just run the command:"
msgstr "类似 :ref:`结构优化 <optimization>` 任务，运行下述命令："

#: ../../source/functions/submit/md.rst:2
msgid "Ab-initio Molecule Dynamics"
msgstr "AIMD 计算"

#: ../../source/functions/submit/md.rst:8
msgid ""
"For ab-initio molecule dynamics (AIMD), likewise the :ref:`optimization "
"<optimization>` task, you can also use :program:`GVasp` to handle its "
"inputs, just run the command:"
msgstr "对于分子动力学模拟（AIMD）计算，类似 :ref:`结构优化 <optimization>` 任务，运行下述命令生成对应的输入文件："

#: ../../source/functions/submit/opt.rst:6
msgid "Optimization"
msgstr "结构优化"

#: ../../source/functions/submit/opt.rst:12
msgid ""
"Optimization is the most common task in the daily calculation work, and "
"we now can quickly generate the inputs for optimization task with the "
"help of :program:`GVasp`, the only need file is the :file:`*.xsd`."
msgstr "结构优化是日常计算任务中最广泛开展的任务类型，现在通过 :program:`GVasp` 可以很快速的生成对应的输入文件，用户只需要提供一个 :file:`*.xsd` 文件即可。"

#: ../../source/functions/submit/opt.rst:14
msgid ""
"When prepared the :file:`*.xsd` (from `Material Studio "
"<https://www.3ds.com/products-services/biovia/products/molecular-"
"modeling-simulation/biovia-materials-studio/>`_ Software) in workdir, run"
" the command:"
msgstr "当准备好 :file:`*.xsd` (来自 `Material Studio <https://www.3ds.com/products-services/biovia/products/molecular-modeling-simulation/biovia-materials-studio/>`_ 软件) 后，执行下述命令："

#: ../../source/functions/submit/opt.rst:20
msgid "and the inputs (|inputs|) will be generated."
msgstr "之后，输入文件 (|inputs|) 就会自动生成出来了。"

#: ../../source/functions/submit/opt.rst:23
msgid ""
"The workdir should only have one \\*.xsd file, otherwise, the structure "
"generated is unknown."
msgstr "工作目录下面只能有一个 \\*.xsd 文件，否则结构生成的结果是未知的。"

#: ../../source/functions/submit/opt.rst:28
msgid "open low-first option"
msgstr "开启 low-first 选项"

#: ../../source/functions/submit/opt.rst:30
msgid ""
"In the practical calculation, the structure optimization is time spent "
"and one method to accelerate the optimization task can start from a low-"
"accuracy calculation and then perform the normal calculation based the "
"optimized low-accuracy structure."
msgstr "在实际的计算任务中，结构优化十分耗时，一种加快策略是先采用低精度开展计算任务，然后再基于低精度优化后的结构进行正常精度的计算。"

#: ../../source/functions/submit/opt.rst:32
msgid ""
"Using :program:`GVasp`, you can run the following command to perform such"
" low-first calculation:"
msgstr "使用 :program:`GVasp`，你可以使用下述命令来开展这样的 low-first 计算任务。"

#: ../../source/functions/submit/opt.rst:39
msgid ""
"In fact, in the latest version, we only set the ENCUT as 300 to perform "
"the low-accuracy calculation."
msgstr "事实上，在当前的版本中，我们只把 ENCUT 设为 300.0 来进行低精度的计算任务。"

#: ../../source/functions/submit/opt.rst:45
msgid "The following arguments can be applied in all of the tasks."
msgstr "下面的参数可以应用在所有的自动生成输入任务中。"

#: ../../source/functions/submit/opt.rst:50
msgid "specify potential"
msgstr "指定赝势"

#: ../../source/functions/submit/opt.rst:52
msgid ""
"Certainly, if you don't like the default potential (**\"PAW_PBE\"**), you"
" can also transfer a argument by specify the potential you want, like "
"this"
msgstr "当然，如果你不想用默认的赝势（**\"PAW_PBE\"**），也可以通过传递参数来指定赝势的类型，类似这样："

#: ../../source/functions/submit/opt.rst:59
msgid ""
"The potential can only specify to the member of the [**'PAW_LDA'**, "
"**'PAW_PBE'**, **'PAW_PW91'**, **'USPP_LDA'**, **'USPP_PW91'**]"
msgstr "指定的赝势必须是 [**'PAW_LDA'**, **'PAW_PBE'**, **'PAW_PW91'**, **'USPP_LDA'**, **'USPP_PW91'**] 这些类型中的其中之一。"

#: ../../source/functions/submit/opt.rst:62
msgid ""
"The -p/--potential accept one or more values, if you specify one "
"potential, all the elements will use the same potential; and if you "
"specify two or more potentials, the potential will auto corresponding to "
"the element in POSCAR, noticed that the number of potential should equal "
"to the number of elements in POSCAR"
msgstr "-p/--potential 接受一个或多个可选值，如果你指定一个赝势，那么所有元素都会用这种赝势；如果指定多个，那么赝势将会一一对应到各自的元素上，注意元素的个数应于 POSCAR 中的元素个数一致。"

#: ../../source/functions/submit/opt.rst:69
msgid ""
"The :program:`GVasp` support including the van der Waals (vdw) correction"
" in calculation, just by running the following command:"
msgstr ":program:`GVasp` 支持指定范德华（vdw）修正选项，只需要运行下述命令："

#: ../../source/functions/submit/opt.rst:76
msgid "Open the vdw option will set IVDW = 12 in INCAR file."
msgstr "开启 vdw 选项会在 INCAR 中设置 IVDW = 12。"

#: ../../source/functions/submit/opt.rst:83
msgid ""
"The :program:`GVasp` support including the solvation effect in "
"calculation, just by running the following command:"
msgstr ":program:`GVasp` 支持开展溶液体系计算，只需要运行下述命令："

#: ../../source/functions/submit/opt.rst:90
msgid ""
"The default solvent is water, and you can modify it by adding EB_K "
"argument in INCAR by yourself."
msgstr "默认溶剂是水，你可以通过修改 INCAR 中的 EB_K 参数来指定不同的溶剂。"

#: ../../source/functions/submit/opt.rst:97
msgid ""
"Use single Gamma-point and vasp_gam to perform the calculation for the "
"large-scale system can run the following command:"
msgstr "使用 vasp_gam 对大尺度体系开展 Gamma 点计算可以使用下述命令："

#: ../../source/functions/submit/opt.rst:108
msgid ""
"If you want to calculate a charged system by setting the NELECT argument,"
" you can also use the :program:`GVasp` to generate the inputs."
msgstr "如果你想通过设置 NELECT 参数来执行带点体系的计算，使用 :program:`GVasp` 也可以很容易的生成对应的输入。"

#: ../../source/functions/submit/opt.rst:110
msgid ""
"Take the +1 charged system as the example, the command line can be typed "
"as this:"
msgstr "以 +1 带电体系为例，执行的命令如下所示："

#: ../../source/functions/submit/opt.rst:117
msgid ""
"The NELECT accept real number as its input, so the float input (e.g., "
"-0.5) is also allowed."
msgstr "NELECT 参数接受实数作为输入值，因此浮点数（例如，-0.5）也是允许值。"

#: ../../source/functions/submit/opt.rst:119
msgid ""
"Noted that the mentioned arguments can also be used lonely or together "
"with other arguments, like this:"
msgstr "上述参数可以单独使用，也可以和其他参数一起共同其效果，类似这样："

#: ../../source/functions/submit/stm.rst:2
msgid "STM image Modeling"
msgstr "STM 图像模拟"

#: ../../source/functions/submit/stm.rst:8
msgid ""
"For STM image modelling, likewise the :ref:`optimization <optimization>` "
"task, you can also use :program:`GVasp` to handle its inputs, just run "
"the command:"
msgstr "对于 STM 模拟，类似 :ref:`结构优化 <optimization>` 任务，运行下述命令生成对应的输入文件："

#: ../../source/functions/submit/ts.rst:2
msgid "Transition State Search"
msgstr "过渡态搜索"

#: ../../source/functions/submit/ts.rst:4
msgid ""
":program:`GVasp` provide three options to search transition state (TS), "
"namely as `Constrained-TS <https://pubs.acs.org/doi/10.1021/ja801648h>`_,"
" `NEB <http://theory.cm.utexas.edu/vtsttools/neb.html>`_ and `Dimer "
"<http://theory.cm.utexas.edu/vtsttools/dimer.html>`_ methods."
msgstr ":program:`GVasp` 提供三种方式来执行过渡态（TS）结构的搜索，分别是 `限制性过渡态搜索 <https://pubs.acs.org/doi/10.1021/ja801648h>`_, `NEB <http://theory.cm.utexas.edu/vtsttools/neb.html>`_ 和 `Dimer <http://theory.cm.utexas.edu/vtsttools/dimer.html>`_ 方法。"

#: ../../source/functions/submit/ts/con-ts.rst:10
msgid ""
"`Constrained-TS (Con-TS) <https://pubs.acs.org/doi/10.1021/ja801648h>`_ "
"is a much faster method to locate the transition state (TS), which "
"searches for TSs from a guessed TS-like structure by fixing only one "
"degree of freedom, e.g., the distance of the dissociating chemical bond."
msgstr "`限制性过渡态搜索 (Con-TS) <https://pubs.acs.org/doi/10.1021/ja801648h>`_ 是定位过渡态（TS）非常高效的方法，它通过固定初猜结构的某一个自由度（例如，原子间的距离）来快速定位过渡态的结构。"

#: ../../source/functions/submit/ts/con-ts.rst:12
msgid ""
":program:`GVasp` support to generate the inputs of Con-TS, just run the "
"command below:"
msgstr ":program:`GVasp` 支持生成 Con-TS 所需的输入文件，只需要运行下述命令："

#: ../../source/functions/submit/ts/dimer.rst:8
msgid ""
"`Dimer <http://theory.cm.utexas.edu/vtsttools/dimer.html>`_ is also a "
"method to locate the TS, which allows the user to start from any initial "
"configuration and search for a nearby saddle point, but actually it not "
"very often use relative to :ref:`Con-TS <con-TS>` and :ref:`NEB "
"<neb_topic>` methods."
msgstr "`Dimer <http://theory.cm.utexas.edu/vtsttools/dimer.html>`_ 也是一种用来定位 TS 的方法，允许用户从一个初始构型出发来搜索过渡态，但是相比于 :ref:`Con-TS <con-TS>` 和 :ref:`NEB <neb_topic>` 方法来说效率较低。"

#: ../../source/functions/submit/ts/dimer.rst:10
msgid ""
":program:`GVasp` also support the Dimer method to locate the TS, just run"
" the command below:"
msgstr ":program:`GVasp` 也支持生成 Dimer 搜索过渡态所需的输入文件，只需要运行下述命令："

#: ../../source/functions/submit/ts/dimer.rst:17
msgid ""
"The Dimer method is not very useful, so **GVasp** provide a little "
"support to this method. We also recommend user to try :ref:`Con-TS <con-"
"TS>` or :ref:`NEB <neb_topic>` method to locate the TS."
msgstr "Dimer 方法搜索过渡态效率较低，因此 **GVasp** 仅提供较少的支持。我们推荐用户尝试 :ref:`Con-TS <con-TS>` 或 :ref:`NEB <neb_topic>` 方法来定位 TS。"

#: ../../source/functions/submit/ts/neb.rst:4
msgid "NEB method"
msgstr "NEB 方法"

#: ../../source/functions/submit/ts/neb.rst:10
msgid ""
"`NEB <http://theory.cm.utexas.edu/vtsttools/neb.html>`_ is a traditional "
"method to locate the TS, which works by optimizing a number of "
"intermediate images along the reaction path. Therefore, it's a "
"computational cost method, while it sometimes can successfully locate TS "
"which can't be searched by :ref:`Con-TS <con-TS>` method."
msgstr "`NEB <http://theory.cm.utexas.edu/vtsttools/neb.html>`_ 是一种传统用来定位 TS 的方法，它通过优化反应路径上的一系列结构来定位过渡态。因此，计算成本高昂，但有时可以用来替代 :ref:`Con-TS <con-TS>` 方法搜索一些特殊的过渡态结构。"

#: ../../source/functions/submit/ts/neb.rst:13
msgid "Don't forget to :ref:`align the structure <align>` first."
msgstr "不要忘记首先 :ref:`对齐结构 <align>` 。"

#: ../../source/functions/submit/ts/neb.rst:15
msgid ""
":program:`GVasp` also support the NEB method to locate the TS, just run "
"the command below:"
msgstr ":program:`GVasp` 也支持生成 NEB 搜索过渡态所需的输入文件，只需要运行下述命令："

#: ../../source/functions/submit/ts/neb.rst:22
msgid ""
"The NEB method will construct the reaction path, so one use NEB method "
"must specify the start (**-ini/-\\-ini_poscar**) and end "
"(**-fni/-\\-fni_poscar**) structure, while **-i**, **-m** and **-c** is "
"optional arguments."
msgstr "NEB 方法会构建反应路径，因此使用 NEB 方法时需要指定开始（**-ini/-\\-ini_poscar**）和结束（**-fni/-\\-fni_poscar**）的结构，**-i**, **-m** 和 **-c** 是可选的参数。"

#: ../../source/functions/submit/ts/neb.rst:25
msgid "specify images"
msgstr "指定 images 的个数"

#: ../../source/functions/submit/ts/neb.rst:27
msgid ""
"Images is the number of intermediate structures between initial and final"
" structures, if you don't specify, :code:`images = 4` will apply."
msgstr "Images 是在初态和末态之间插入的中间体结构个数，如果不指定，默认为 4 。"

#: ../../source/functions/submit/ts/neb.rst:30
msgid "specify method"
msgstr "指定路径生成方法"

#: ../../source/functions/submit/ts/neb.rst:32
msgid ""
"GVasp provide two method to control how to generate the intermediate "
"structures."
msgstr "GVasp 提供两种方法来生成反应路径的结构。"

#: ../../source/functions/submit/ts/neb.rst:34
msgid ""
"One is :code:`linear`, generate structures by linear interpolation from "
"start to end structures."
msgstr "一种是 :code:`linear`，使用线性插值方法来生成中间体结构。"

#: ../../source/functions/submit/ts/neb.rst:36
msgid ""
"Another is :code:`idpp` method, which declares to generate more suitable "
"structures for NEB task, more detailed information can be seen `here "
"<https://aip.scitation.org/doi/10.1063/1.4878664>`_."
msgstr "另一种是 :code:`idpp` 方法，该方法声称可以生成更靠近真实反应坐标的中间体结构，更多细节可以看 `这里 <https://aip.scitation.org/doi/10.1063/1.4878664>`_ 。"

#: ../../source/functions/submit/ts/neb.rst:38
msgid ""
"If you don't specify the :code:`method`, GVasp will apply :code:`method ="
" \"linear\"`."
msgstr "如果不指定 :code:`method`，GVasp 默认采用 linear 来生成反应路径。"

#: ../../source/functions/submit/ts/neb.rst:41
msgid "check overlap"
msgstr "检查结构是否重叠"

#: ../../source/functions/submit/ts/neb.rst:43
msgid ""
"Noted that the intermediate structures generated automatically, so some "
"atoms may overlap or closing in some cases, if you don't check, the NEB "
"task may fail quickly."
msgstr "你可能注意到中间体结构是自动生成的，因此在某些体系中可能会发生原子重叠的情况，如果你不进行检查，NEB 任务很大可能会失败。"

#: ../../source/functions/submit/ts/neb.rst:45
msgid ""
"Therefore, :program:`GVasp` check overlap always when you generate the "
"inputs, and this behavior is also its default."
msgstr "因此，:program:`GVasp` 在生成 NEB 输入时总是会自动检查原子重叠。"

#: ../../source/functions/submit/ts/neb.rst:47
msgid ""
"If you don't like this, you can set :code:`-c/--cancel_check_overlap` to "
"cancel check, but we (actually I) strongly recommend you don't do this "
"`dangerous` action."
msgstr "如果你不喜欢这种默认行为，你也可以设置 :code:`-c/--cancel_check_overlap` 来取消检查，但是我们（实际上是我）强烈推荐不要做这种 `危险` 行为。"

#: ../../source/functions/submit/wf.rst:2
msgid "Work Function"
msgstr "功函计算"

#: ../../source/functions/submit/wf.rst:8
msgid ""
"Work Function (WF) calculation is another important task, you can also "
"use :program:`GVasp` to handle its inputs."
msgstr "功函（WF）计算也是另一项十分重要的任务类型，使用 :program:`GVasp` 也可以很容易的生成对应的输入文件。"

#: ../../source/functions/submit/wf.rst:19
msgid ""
"Meantime, you can also start a wf task from a finished job which has the "
"CONTCAR file, and the :program:`GVasp` will auto generate the inputs for "
"this task, just run the following command:"
msgstr "同时，你也可以从一个已经完成的任务（含有 CONTCAR 文件）出发开展该类型的任务，只需要运行下述命令："

#: ../../source/functions/submit/wf.rst:26
msgid "This feature is also support for the chg and dos tasks."
msgstr "这一功能也支持 chg 和 dos 任务类型。"

#: ../../source/functions/submit/wf.rst:31
msgid ""
"If you finally want to perform the WF calculation, we recommend you use "
"the following command:"
msgstr "如果你的最终目标是开展 WF 计算，我们推荐你使用下述命令："

#: ../../source/functions/submit/wf.rst:37
msgid ""
"and the task will perform the optimization and WF calculation in a "
"sequential task."
msgstr "之后，该作业会先从结构优化任务开始，结束后再进行功函计算。"

#: ../../source/functions/submit/wf.rst:40
msgid "Sequential task also support the :ref:`low <low>` option."
msgstr "连续任务也支持开启 :ref:`low <low>` 选项。"
